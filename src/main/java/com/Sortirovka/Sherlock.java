package com.Sortirovka;

import java.util.Scanner;

/**
 * Created by alekspribysh on 1/19/16.
 */
public class Sherlock {
    public static void main(String[] args) {
        String str = "931 755 547 1324 1504 854 1142 637 1074 1083 1295 812 875 1053 1204 1191 1389 1496 1251 690 689 949 940 880 571 959 621 852 838 1470 728 1531 635 1006 641 1511 896 956 1465 842 613 961 1448 1232 1344 901 1392 1559 700 1092 1127 1024 759 1035 1536 990 549 1093 1528 1392 1269 1137 933 790 1299 1153 713 831 1091 621 650 859 1559 1552 1090 1366 1585 726 1085 1352 1224 664 1152 1470 1155 1346 1061 1011 1012 1067 1104 768 1233 1505 907 1014 1168 1378 910 1130 1073 899 1444 1443 978 1487 875 1124 1202 837 783 671 1436 1024 1278 1067 752 1022 1117 657 1081 626 582 1018 1041 1105 1049 851 1104 669 1463 1481 747 1143 1139 721 1233 820 1004 770 1352 667 778 1018 1588 1285 1574 880 692 827 1121 1385 1349 547 838 1089 857 992 669 624 1048 1384 869 706 719 578 1452 1149 1482 585 676 607 1592 567 768 812 688 770 833 734 1505 920 1212 1190 1102 667 1358 1183 1252 737 1302 1540 735 1100 1348 895 996 815 1465 1496 744 1247 684 1562 1027 1490 1504 1482 949 967 566 1166 1306 791 1099 845 880 937 1219 774 640 734 1515 692 1412 1457 678 1539 767 1090 1198 626 952 1210 728 618 1470 1467 1244 846 1517 1059 1475 1200 1372 1382 934 846 839 1515 1146 865 1089 1335 1255 794 1287 1012 847 922 1368 834 894 1150 1584 586 1046 990 1172 591 573 1315 880 970 1085 1413 1169 727 1143 1330 1090 778 1473 960 1530 958 840 979 1481 949 918 783 719 1160 1396 1533 646 732 681 1138 1184 679 934 1187 1145 1070 835 593 746 1303 1232 1050 1190 576 952 1285 1434 1577 1135 1278 1473 1115 1469 1443 577 1143 1355 848 899 641 1266 732 1150 712 1018 706 885 1034 1558 912 1068 1519 665 578 1542 1121 1009 854 1437 1481 1492 781 822 1435 618 1099 917 1441 739 1413 1305 655 1115 1317 1502 770 604 778 583 636 1086 1493 1129 977 828 1212 692 980 1479 740 703 842 927 1060 958 1227 569 1563 862 1584 1246 870 1171 1026 1042 637 1339 578 1149 546 661 614 1346 1381 1420 1390 610 777 1058 1397 557 1063 664 762 1394 1175 549 1565 1563 1243 1568 1540 1343 1183 1109 1397 586 669 603 1388 1168 1426 610 1459 644 1586 1061 1296 1586 1016 889 1110 1128 1099 1366 1455 1542 1101 1529 1485 1005 806 732 1030 854 706 805 1413 679 953 1165 1342 1060 1499 1254 1056 828 715 1289 1261 1444 1261 1068 585 1221 1572 969 1325 1066 950 1321 1412 1116 1511 806 1174 1400 1058 1093 1366 948 1314 1589 1549 594 577 754 878 595 1179 1501 642 1290 1587 1255 1102 1388 1592 553 1418 757 1215 916 1424 713 1345 1403 624 1415 1325 623 617 1266 1482 1377 1476 612 972 1019 1544 1592 613 655 713 1201 743 1444 1586 1492 887 1484 1421 563 943 1368 1569 723 714 1149 1381 716 687 1101 1395 1209 718 1005 772 1479 916 551 1554 654 1226 698 1384 1144 1392 1335 847 679 1037 739 879 693 1174 1322 1137 1276 741 640 777 989 1092 823 942 1598 562 947 1073 643 634 952 1347 1219 1309 559 1220 853 646 713 785 1573 1369 952 1544 694 996 856 1128 813 1547 1174 1452 738 1403 930 553 786 1315 587 1385 561 1017 706 982 1352 1350 658 1539 644 605 994 967 2325 1855 2224 1268 1253 2706 1395 2095 1667 2092 1276 1226 1526 1949 2381 2686 983 2469 2744 1464 2004 1437 2629 1975 2734 1647 1135 1009 1275 2202 1958 2157 2211 2094 1775 2251 2663 2485 2144 1241 2551 2505 1253 2044 2520 2488 1438 2380 1380 2500 1151 2104 2569 1540 2543 1758 2024 1284 1161 1108 1335 1120 1309 1890 2368 2381 1584 997 1984 2545 1240 1102 1480 1222 1025 2017 2016 2203 2186 2135 2271 2227 2121 1852 2036 1699 1795 1169 1248 2584 1429 2059 2682 2575 1070 2002 1033 2172 1810 1699 1934 1924 2200 2255 1911 2274 2189 1754 2669 1381 2544 2748 2727 1040 2003 1699 1332 2010 1920 1135 1974 1132 1842 1653 2369 2405 1432 1789 1792 1081 2581 996 2385 1486 1922 1019 996 2397 1675 1158 2463 1111 2734 1085 2461 990 2271 1486 1738 1863 2727 1913 1801 1791 1792 1587 1902 2499 1915 1636 1669 1222 2618 2633 1801 1807 2070 2514 1933 1112 2650 2181 1335 2000 1382 1209 1152 1434 1773 1276 1045 1868 1879 2638 1273 2289 1600 1924 1313 1703 1335 1126 1558 1410 2272 1072 2135 2183 1586 2581 1172 1202 1498 1783 1492 1617 1911 1073 2416 1702 2299 2605 2709 1672 1072 1358 1350 1731 1745 2120 2424 1555 1388 2595 2197 2317 2375 1595 1914 1815 1272 2243 1528 1867 1836 1149 1366 1720 2753 1475 1229 2561 1931 2370 1163 1820 1843 2458 1617 2739 1459 1247 1077 2663 2619 1147 1889 2760 2320 2281 1778 1534 2183 1212 2425 995 2286 1174 2462 1671 1092 2481 2200 2411 2012 1114 1430 998 1726 1744 2649 1539 2054 2730 2039 1249 2659 2318 1722 1522 2361 2011 2751 1020 1216 1024 2136 2299 1794 1346 1418 1021 2369 2650 1136 1348 1071 1781 1366 1768 1715 1458 1598 2515 2443 967 2239 2083 1477 1981 1569 2219 1348 1647 1282 1266 1633 1071 1460 1266 2568 1122 1788 2522 1303 2559 1237 2541 1698 2387 1899 1953 1650 1055 1025 1409 2689 2488 2699 1675 991 1703 2260 2163 1040 1831 1178 2750 2124 1802 1421 1224 2302 2580 1203 1087 1350";
        int[] arra = {1, 2, 3, 3};

        String[] strArray = str.split(" ");
        int[] intArray = new int[strArray.length];
        for(int i = 0; i < strArray.length; i++) {
            intArray[i] = Integer.parseInt(strArray[i]);
        }

        Sherlock sherlock = new Sherlock();
        sherlock.find(intArray);

    }


    public void find(int[] arr) {

        for (int i = 1; i < arr.length; i++) {
            int sum1 = 0;
            int sum2 = 0;
            int k = i;
            int z = i;

            while (k > 0) {
                sum1 = sum1 + arr[k - 1];
                k--;


            }
            while (z < arr.length - 1) {
                sum2 = sum2 + arr[z + 1];
                z++;
                if (sum2 > sum1){
                    break;
                }
            }

            if (sum1 == sum2 ) {
                System.out.println("Yes");
                return;
            }

        }
        System.out.println("No");

    }
}

